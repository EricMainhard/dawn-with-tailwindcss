{% liquid

    assign section_title = section.settings.section_title
    assign description = product.description
    assign key_features = section.blocks | where: 'type', 'key_features' | first
    assign key_features--key = key_features.settings.metafield_key
    assign key_features--content = product.metafields.custom[key_features--key]
    assign key_features--content = key_features--content | split: 'bullet:'
    assign shipping_info = section.blocks | where: 'type', 'shipping_info' | first
    assign shipping_info--content = shipping_info.settings.content
    assign package_items = section.blocks | where: 'type', 'package_items' | first
    assign package_empty_msg = package_items.settings.empty_message
    assign package_items_limit = package_items.settings.limit
%}

{{ 'section-main-tabs.css' | asset_url | stylesheet_tag }}

<div class="main-product-tabs">
    {%- if section_title -%}
        <h2 class="text-lg">{{ section_title }}</h2>
    {%- endif -%}
    <div class="main-product-tabs__tabs mt-3 flex">
        {% for block in section.blocks %}
            {%- assign title = block.settings.title -%}
            {%- case block.type -%}
                {%- when 'product_desc' -%}
                    {%- if description -%}
                        <button class="tablink border p-2 border-r-0 bg-[#cacaca]" onclick="openTab('description', this)">
                            {{ title }}
                        </button>
                    {%- endif %}
                {%- when 'key_features' -%}
                    {%- if product.metafields.custom[key_features--key] -%}
                        <button class="tablink border p-2 border-r-0 bg-[#cacaca]" onclick="openTab('features', this)">
                            {{ title }}
                        </button>
                    {%- endif -%}
                {%- when 'shipping_info' -%}
                    {%- if shipping_info--content != blank -%}
                        <button class="tablink border p-2 border-r-0 bg-[#cacaca]" onclick="openTab('shipping', this)">
                            {{ title }}
                        </button>
                    {%- endif -%}
                {%- when 'package_items' -%}
                    <button class="tablink border p-2 last:border-r bg-[#cacaca]" onclick="openTab('package', this)">
                        {{ title }}
                    </button>
            {%- endcase -%}
        {%- endfor -%}
    </div>
    <div class="main-product-tabs__content border p-2">
        {%- if description != blank -%}
            <div class="main-product-tabs__single hidden p-2 relative" id="description">
                {{ description }}
            </div>
        {%- endif -%}
        {%- if key_features--content != blank -%}
            <ul class="main-product-tabs__single hidden p-2 relative pl-4 list-disc" id="features">
                {%- for feature in key_features--content -%}
                    {%- if feature != blank -%}
                        <li>{{ feature }}</li>
                    {%- endif -%}    
                {%- endfor -%}
            </ul>
        {%- endif -%}
        {%- if shipping_info--content != blank -%}
            <div class="main-product-tabs__single hidden p-2 relative" id="shipping">
                {{ shipping_info--content }}
            </div>
        {%- endif -%}
        <div class="main-product-tabs__single hidden p-2 relative" id="package">
            <div class="package__empty">
                <h4>
                    {{ package_empty_msg }}
                </h4>
                <button class="package__fetch-button" data-limit="{{ package_items_limit }}">Get Data now</button>
            </div>
            <span class="loading-overlay hidden left-1/2">
                <span class="loading-overlay__spinner">
                    <svg
                    aria-hidden="true"
                    focusable="false"
                    class="spinner"
                    viewBox="0 0 66 66"
                    xmlns="http://www.w3.org/2000/svg"
                    >
                    <circle class="path" fill="none" stroke-width="6" cx="33" cy="33" r="30"></circle>
                    </svg>
                </span>
            </span>
            <div id="cards-container" class="flex items-stretch gap-1">
                <template id="card-template">
                    <div class="card justify-between border flex-1 p-2">
                        <span class="card-index"></span>
                        <h2 class="card-title"></h2>
                        <div class="card-info flex gap-1">
                            <p class="card-status"></p> | <p class="card-user"></p>
                        </div>
                    </div>
                </template>
            </div>
        </div>
    </div>  
</div>

<script>
    let tabs = [...document.querySelectorAll('.main-product-tabs__tabs .tablink')];
    let tabsContents = [...document.querySelectorAll('.main-product-tabs__content .main-product-tabs__single')];
    let packageButton = document.querySelector('.package__fetch-button');
    let packageLimit = packageButton ? packageButton.getAttribute('data-limit') : null;
    let cardsContainer = document.getElementById('cards-container');

    if (tabs) tabs[0].click();
    
    if (packageButton) packageButton.addEventListener('click', fetchCards);

    function openTab(id, tab){
        tabs.forEach(tab => tab.classList.remove('active'));
        tab.classList.add('active');
        tabsContents.forEach(content => content.classList.remove('active'));
        let activeContent = tabsContents.find(content => content.id === id);
        activeContent.classList.add('active');
    }

    function fetchCards(){
        let package__empty = document.querySelector('#package .package__empty');
        let package__loading = document.querySelector('#package .loading-overlay');
        let template = document.getElementById('card-template');

        package__empty.classList.add('hidden');
        package__loading.classList.remove('hidden');

        setTimeout(() => {
            fetch('https://jsonplaceholder.typicode.com/todos')
            .then(response => response.json())
            .then(data => {
                package__loading.classList.add('hidden');
                packageLimit ? data = data.slice(0, packageLimit) : data;

                data.forEach(item => {
                    let clone = document.importNode(template.content, true);

                    clone.querySelector('.card-index').textContent = '#' + item.id;
                    clone.querySelector('.card-title').textContent = item.title;
                    clone.querySelector('.card-status').textContent = item.completed ? 'COMPLETED' : 'NOT COMPLETED';
                    clone.querySelector('.card-user').textContent = item.userId;
                    
                    let card = clone.querySelector('.card');
                    item.completed ? card.classList.add('completed') : card.classList.add('pending');

                    container.appendChild(clone);
                    cardsContainer?.classList.add('filled');
                });
            })
            .catch(error => console.error(error));
        }, 1000);
    }
</script>

{% schema %}
{
    "name": "Main product tabs",
    "tag": "section",
    "class": "section page-width",
    "disabled_on": {
        "groups": ["header", "footer"]
    },
    "settings": [
        {
            "type": "text",
            "id": "section_title",
            "label": "Section title"
        }
    ],
    "blocks": [
        {
            "type": "product_desc",
            "name": "Product description",
            "limit": 1,
            "settings": [
                {
                    "type": "text",
                    "id": "title",
                    "label": "Title",
                    "default": "Product description"
                }
            ]
        },
        {
            "type": "key_features",
            "name": "Key Features",
            "limit": 1,
            "settings": [
                {
                    "type": "text",
                    "id": "title",
                    "label": "Title",
                    "default": "Key Features"
                },
                {
                    "type": "text",
                    "id": "metafield_key",
                    "label": "Metafield key",
                    "default": "key_features"
                }
            ]
        },
        {
            "type": "shipping_info",
            "name": "Shipping info",
            "limit": 1,
            "settings": [
                {
                    "type": "text",
                    "id": "title",
                    "label": "Title",
                    "default": "Shipping info"
                },
                {
                    "type": "richtext",
                    "id": "content",
                    "label": "Content"
                }
            ]
        },
        {
            "type": "package_items",
            "name": "Items included in Package",
            "limit": 1,
            "settings": [
                {
                    "type": "text",
                    "id": "title",
                    "label": "Title",
                    "default": "Items included in Package"
                },
                {
                    "type": "text",
                    "id": "empty_message",
                    "label": "Empty message",
                    "default": "There's nothing here"
                },
                {
                    "type": "range",
                    "id": "limit",
                    "label": "Cards limit",
                    "min": 3,
                    "max": 10,
                    "step": 1,
                    "default": 5
                }
            ]
        }
    ],
    "presets": [
        {
            "name": "Main product tabs",
            "category": "Product page"
        }
    ]
}
{% endschema %}